name: Preproc data and train model

on: 
  push:
    branches:
      - main
    paths:
      - 'data/raw/UCI_Credit_Card.csv'
      - 'creditrisk/**/*.py'
      - 'models/best_params.pkl'
      - '.github/workflows/retrain_on_change.yml'
  workflow_dispatch:

# Prevent multiple workflow runs from conflicting
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preprocess:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent hung jobs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: "3.11"
          cache: 'pip'  # Cache pip dependencies
          
      - name: Install dependencies
        run: |
          python -m pip install -U pip uv
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install python-dotenv  # Ensure correct dotenv package
        
      - name: Setup environment
        run: |
          # Install tree command
          sudo apt-get update
          sudo apt-get install -y tree
          
          # Create all required directories
          mkdir -p data/raw
          mkdir -p data/processed
          mkdir -p data/interim
          mkdir -p data/external
          mkdir -p models
          mkdir -p reports/figures
          
          # Show initial directory structure
          echo "Initial directory structure:"
          tree
          
      - name: Run preprocessing
        id: preprocess
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        continue-on-error: true
        run: |
          source .venv/bin/activate
          
          # Validate Kaggle credentials
          if [ -z "$KAGGLE_USERNAME" ] || [ -z "$KAGGLE_KEY" ]; then
            echo "Error: Kaggle credentials not provided"
            exit 1
          fi
          
          # Create Kaggle config
          mkdir -p $HOME/.config/kaggle
          echo "{\"username\":\"$KAGGLE_USERNAME\",\"key\":\"$KAGGLE_KEY\"}" > $HOME/.config/kaggle/kaggle.json
          chmod 600 $HOME/.config/kaggle/kaggle.json
          
          # Run preprocessing with retries (includes download)
          for i in {1..3}; do
            echo "Preprocessing attempt $i..."
            echo "Current directory structure:"
            tree data/
            
            # Run preprocessing with output capture and debug logging
            echo "Python environment:"
            echo "PYTHONPATH=$PWD"
            echo "PROJ_ROOT=$PWD"
            python -c "import sys; print(sys.path)" 2>&1 | tee debug.log
            
            if PYTHONPATH=$PWD PROJ_ROOT=$PWD LOGURU_LEVEL=DEBUG python -m creditrisk.data.preproc 2>&1 | tee preprocess.log; then
              echo "Preprocessing script completed, checking output..."
              
              if [ ! -f "data/raw/UCI_Credit_Card.csv" ]; then
                echo "Error: Raw data file not downloaded"
                echo "Current directory structure:"
                tree
                echo "Debug info:"
                cat debug.log
                echo "Process log:"
                cat preprocess.log
                exit 1
              fi
              
              if [ -z "$(ls -A data/processed)" ]; then
                echo "Error: No processed files generated"
                echo "Current directory structure:"
                tree
                echo "Debug info:"
                cat debug.log
                echo "Process log:"
                cat preprocess.log
                exit 1
              fi
              
              echo "Preprocessing completed successfully"
              echo "Final directory structure:"
              tree data/
              exit 0
            fi
            
            echo "Attempt $i failed"
            echo "Current directory structure:"
            tree
            echo "Process log:"
            cat preprocess.log
            echo "Retrying in 5 seconds..."
            sleep 5
          done
          
          echo "All preprocessing attempts failed"
          echo "Final directory structure:"
          tree
          echo "Final attempt log:"
          cat preprocess.log
          exit 1
          
      - name: Verify processed data
        if: success()
        id: verify_preproc
        run: |
          if [ ! -d "data/processed" ]; then
            echo "Error: Processed data directory does not exist"
            exit 1
          fi
          
          if [ -z "$(ls -A data/processed)" ]; then
            echo "Error: Processed data directory is empty"
            ls -la data/  # List contents of parent directory for debugging
            exit 1
          fi
          
          echo "Contents of processed data directory:"
          ls -la data/processed/
          echo "Processed data verified successfully"

      - name: Upload processed data
        if: success() && steps.verify_preproc.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed
          retention-days: 1  # Only keep for duration needed
          
      # - name: Notify on preprocessing failure
      #   if: failure()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.issues.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: 'Preprocessing failed in retraining workflow',
      #         body: `Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
      #       })

  train:
    needs: preprocess
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: write 
    
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download processed data
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed

      - name: Verify processed data
        id: verify
        run: |
          if [ ! -d "data/processed" ] || [ -z "$(ls -A data/processed)" ]; then
            echo "Error: Failed to download or verify processed data"
            exit 1
          fi
          echo "Processed data verified successfully"

      - name: Fail if data verification failed
        if: failure()
        run: exit 1
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
          python-version: "3.11"
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install -U pip uv
          uv venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install python-dotenv  # Ensure correct dotenv package
          
      - name: Setup environment
        run: |
          # Install tree command
          sudo apt-get update
          sudo apt-get install -y tree
          
          # Create all required directories
          mkdir -p data/raw
          mkdir -p data/processed
          mkdir -p data/interim
          mkdir -p data/external
          mkdir -p models
          mkdir -p reports/figures
          mkdir -p .mlflow/db
          mkdir -p .mlflow/artifacts
          
          # Show initial directory structure
          echo "Initial directory structure:"
          tree
          
      - name: Run training
        id: train
        continue-on-error: true
        run: |
          source .venv/bin/activate
          
          for i in {1..3}; do
            echo "Training attempt $i..."
            echo "Current directory structure:"
            tree
            
            # Show Python environment
            echo "Python environment:"
            echo "PYTHONPATH=$PWD"
            echo "PROJ_ROOT=$PWD"
            python -c "import sys; print(sys.path)" 2>&1 | tee debug.log
            
            # Run training with output capture
            if PYTHONPATH=$PWD PROJ_ROOT=$PWD LOGURU_LEVEL=DEBUG python -m creditrisk.models.train 2>&1 | tee train.log; then
              echo "Training completed successfully"
              echo "Final directory structure:"
              tree
              exit 0
            fi
            
            echo "Attempt $i failed"
            echo "Current directory structure:"
            tree
            echo "Training log:"
            cat train.log
            echo "Retrying in 5 seconds..."
            sleep 5
          done
          
          echo "All training attempts failed"
          echo "Final directory structure:"
          tree
          echo "Final attempt log:"
          cat train.log
          exit 1

      - name: Update ML artifacts
        if: success() && steps.train.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          # First, disable branch protection
          echo "Disabling branch protection..."
          curl -L \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/branches/main/protection

          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Push directly to main
          git add .mlflow/artifacts/
          git add .mlflow/db/
          git add models/
          git add reports/figures/
          git add data/processed/
          git add mlruns/
          
          if ! git diff --cached --quiet; then
            git commit -m "Update ML artifacts [skip ci]"
            git push origin main
          else
            echo "No changes to commit"
          fi

          # Restore branch protection
          echo "Restoring branch protection..."
          curl -L \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/branches/main/protection \
            -d '{
              "required_status_checks": null,
              "enforce_admins": false,
              "required_pull_request_reviews": {
                "required_approving_review_count": 1
              },
              "restrictions": null,
              "required_linear_history": false,
              "allow_force_pushes": false,
              "allow_deletions": false
            }'
          
      - name: Trigger Predict Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.WORKFLOW_PAT }}  # Use a personal access token
          event-type: trigger-predict
          
      # - name: Notify on training failure
      #   if: failure()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.issues.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: 'Training failed in retraining workflow',
      #         body: `Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
      #       })